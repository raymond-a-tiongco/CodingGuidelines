# 3-3 Coding Practice

## All Projects

### Coding Style
Please also read [Coding Styles](./coding_style) for formatting standard.

<br>

### Coding Rules
Please also read [Coding Rules](../coding_rules/java/coding-rules_forJava8.md) for Coding Rules.

<br>

### Dependency Minimization
> Remove unnecessary dependency.
> Too much dependency results in conflicts around .jar versions or regression, for it compels us to make an intricate .jar handling.
> If you find your business logic being referred to by multiple other classes, you probably misunderstand the usages of util and business logic, because such a case basically never happens.
> Util classes that are highly versatile are intended to be used by any packages, but only a minimum number of processes must be allowed to depend on business logics.
> This is a principle related to [Place Them in Their Neighborhood].
> Confirm you aren't making a class depend on a business logic instead of a util.
> Confirm a class that you want your class to depend on doesn't have any nouns specific to business logic.

<br>

### Place Them in Their Neighborhood

> It makes your implementation highly readable to place your pieces of code close together with those of high relevancy.
> If you place it on a distant place, it consumes a lot of your time to investigate the influence of your code changes, 
> because this will require wider area to search and make you anxious that you may make an oversight.


> Beware of the following matters.
> * A class that is used only on one project must be placed in that project.
> * A class that is used only on one package must be placed in that package.
> * A class that is used only by one class must be placed in the latter class.
> * Do not make a common class or an outer package which you are uncertain is used.
> * Check the chapter [Package-Private](#パッケージ-private) too.

<br>

### Package-Private
> A package must be closed in the unit of purpose and responsibilities, otherwise you can say that the design fails in object-oriented design.
> Dependency should be restricted at most to parent-child packages relations, such that a child package only may refer to its parent.
> This also achieves [Place Them in Their Neighborhood](#近い場所に定義).
> Beware of the following matters.
> * Like in the case of classes, packages dependent to each other also fail in object-oriented design.
> * Bidirectional dependencies between packages even in one project must be avoided too.
> * To accomplish it, you're supposed to have a tree structure with a package of the broadest sense on top, where the more you go downstream, the finer senses your packages get.
> * Packages from same stratum have same level of roles.
> * If a project has packages with strong mutual dependency, it will be hopeless for a single package therein to migrate to another project.
> The last case especially is often told. There you can't reimplement a package as a common module, although it's got being referred to by multiple projects as the business has got advanced.
> Such projects will bear redundant codes and be suffering from the lack of readability, maintainability and finally productivity as a result. 

<br>

> ### No Duplicate Codes Allowed
> Object-oriented design does not allow same codes to exist in multiple classes. Revise the internal design to reconsider what class your process should belong to.

<br>

### Remove Unnecessary Codes

> No one but a person who has modified it knows the detail of the revision.
> With unnecessary codes left, the next modifier will have to pay triple costs of investigating their uses, getting perplexed for not finding them and checking who made the needless work, 
> because he or she will take the inevitability of any existing sources as granted.
> Beware of the following matters.
> * When you face a situation of revising a source with both old and new codes or schemas placed together, delete the old ones after release.
> * Codes just for testing or confirming your implementation on product environment must be deleted as they've got to be unnecessary as well.

<br>

### YAGNI

[YAGNI](https://en.wikipedia.org/wiki/You_aren't_gonna_need_it)を考慮しましょう.
> Observe [YAGNI](https://en.wikipedia.org/wiki/You_aren't_gonna_need_it)

<br>

### Implement Symmetrically
> Symmetric codes reduce bugs, reduce costs of study, raise readability and make themselves easier to search, in other words, are productive.
> Codes conforming to a specific school help a programmer gain insight of "my new implementation should be in accordance with that process because they are broadly alike." and find a sample easily.
> Beware of the following matters.
> * All projects involved must apply one coherent package structure design.
> * All projects involved must use same libraries.
> * All projects involved must apply one policy of naming classes.
> * Arrangement and names of fields and methods in a class must be unified through projects.
> * Business logics must conform to a same coding school through projects. (It doesn't mean duplicate codes are allowed.)
> * Code for basic utils and algorithms must be shared among projects.
> * Beware of a case where new dependency between packages is added, because it may have defiled the symmetry.
> * Consider designing package structure as a part of programming as well. Each stratum with same kind of packages grants more symmetry. ( [Unify Meanings of Package Levels](#パッケージ階層の意味を揃える) )

<br>

### Unify Meanings of Package Levels

> Find it strange, if you see packages like "jp.admatrix.tpas.service" and "jp.admatrix.tpas.sync" at the same time.
> (sync must be under service.)
> Coherent meanings of package hierarchy help us attain [Package-Private](#パッケージ-private) and [Implement Symmetrically](#対称的に書く) easier, and result in readable codes friendly to investigation as a result.
* パッケージ構成もプログラミングだと思う事を習慣にすべきです. パッケージも綺麗にと思う事が第一歩です.
* どうしても階層を揃えられない場合は存在します. その場合は原則を破っていいのですが、その原則の破り方をプロジェクトを跨いで統一しましょう([Implement Symmetrically](#対称的に書く)).
> * Make a habit of regarding a package structure as a program. It is also a step for an engineer to realize beautiful hierarchy.
> * There actually exist some cases of a stratum to that coherent rules are difficult to be applied.
> We must introduce regulations about the way to defile the principle applied to all projects then.

<br>

> ### Never Start New Project with Your Own Decision.
> A project rarely maintained would get unmanaged, miss updates and get infested by bugs. 
> Beware of the following matters.
> * Do not create a new project only for a common implementation or a business logic of a specific process.
> A project is a concept for a greater role than that.
> * If you find initiation of a new project inevitable, consult with your project manager about it.

<br>

### Do Not Directly Call DB Access Involving Multiple Services.

> Be sure let services access DB tables via their CRUD interfaces in the apis, in accordance with the idea of microservices, otherwise the system maintenance should get out of control, especially where RDBMS solved dependencies between them.

<br>

### Conform to Object-Oriented Design
> Methods and fields defying the concept of an object result in a spaghetti code, with which engineers will take an additional triple cost of onerous investigation, bug infestation and due repairs.
> Beware of the following matters.
> * Isn't your program focused just on processes? You must also care for the object structures.
> * Do the names of your methods/fields coherent with their uses?
> Prevent each of them having more than one meaning.
> * Sometimes, modification alters the meanings of objects. In such case, reconsider the name (and/or structure) of related classes and packages.
> * Are you anxious about fixing the existing code? It is you who is to do it, otherwise another person will incur a greater risk for it.

<br>　

### Abolish Codes that Work but Lack Order
> A code functioning for the time being does not mean OK. 
> Make sure it's coherent to other codes of similar processes, because otherwise any of your possible errors will stay unnoticed for a long time (at worst for several years),
for the other engineers who will make similar works after you will only observe the typical codes and ignore your irregular implementation.
> Another possible problem is, an engineer who will take on a module that is supposed to refer to your odd code may also furnish his or hers with irregular codes of "if" or "case" clauses to offset your original irregularity.
> Such collateral disorder will also spread by the hands of others expanding the solution.
> Beware of the following matters.
> * Not to mention you must suffice the requirement, your code must be orderly too.
> * Before you modify a code, investigate its surroundings to make it consistent to other codes.
> * The points you should care for are basically the same to those in [Implement Symmetrically](#対称的に書く), but also keep this paragraph in mind.
> * A good code released a bit late is firmly better than a bad code with early release.
> * Disordered codes must be modified even with some risks.

<br>

### Correspondence of Name to Substance
> To help understand existing processes, highly readable codes are required.
> Names are an important element for it.
> Beware of the following matters.
> * Confirm that members, fields and other stuffs with different meanings have different names.
> * Does your method have a name reflecting the exact role of it?
> * A business logic mustn't have any magic word in it, (ex. /tmp/normal/old/classic)
> although util classes are recommended to have magic words conversely.
> * Does your method/field have an English name natural to non-Japanese?
> Learn English language too.
> * When a system revision alters the meanings of implementation, take risks to change the names of classes and packages to make them fit.

<br>

### About Secure Coding
> In security measures, it is important to avoid vulnerable code. 
> 276 It is possible that the software will be released with vulnerabilities still present
> and the service may be stopped due to attacks, so be aware of this when coding.     

Take note of the following.  

https://www.jpcert.or.jp/java-rules/


### Release Effect
> It is insufficient just to care for regression of normal cases. 
> You need to consider any possibility of your release to conceive a new potential problem.

<br>

### Get Parameters from BidTag
> A bidTag must keep a url as short as possible, because a browser can handle the attribute with length only less than 2000.
> Any tag with url exceeding this amount won't work, in other words, the situation will be the same to "charge lost".
> You will encounter the issue when a url contains many Get parameters.

<br>

### Preliminary Processes

#### Synchronous and Asynchronous Thread
> * There exist synchronous thread processes represented by BidLogic and asynchronous ones represented by AdgroupDataContext.
> * Any process in a synchronous thread that can be handled in advance must be relocated to an asynchronous one.

#### Synchronous threads must avoid containing a process to decide what process is to be executed
> * To realize this, it is recommended to apply the strategy pattern of enum to avoid switch clauses with enum.
> * Or, use the strategy pattern of classes.
> * It is desirable that each enum or class executes its polymorphic process if called. 
> The solution of using "if" or "switch-case" clauses to distinguish the process by its corresponding id is deprecated.
> * By the way, object-oriented design addicts(experts) say, "if" clause is even unnecessary for an extremely fundamentalist way.
> Codes containing many "if" clauses should be regarded as a product of defective designs in any way.

<br>

### Pathway of Charge
> Beware of the linkage from tapi to dmp_api. Errors happening here may cause losses of tens of million dollars if overlooked, 
> which are for the business sufficient to go under and the company may also lose its standing and the stock price.
> Abnormal errors must definitely be recorded.
　
<br>

### Data Loading to Be Reduced as Possible
> * Currently, "SELECT" queries have already been placing enormous stress on RDBMS. 
> Designs with minimum amount of "SELECT" clauses are required.
> * An api is supposed to obtain DB data via an api having requested data stored as cached.


